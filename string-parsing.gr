import Array from "array"
import String from "string"
import Result from "result"
import Regex from "regex"

record Counter {
  mut count: Number,
}
let addOne = c => {
  c.count = incr(c.count)
}

record Accum {
  mut value: String,
}

let mut acc = { value: "", }
let mut counter = { count: 0, }

let upperRe = Result.unwrap(Regex.make("^[A-Z]*$"))

let makeString =
  (
    strChar,
    arr,
    counter: Counter,
    accumulator: Accum,
    collection,
  ) => {
  let isUpper = Regex.isMatch(upperRe, strChar)
  while (counter.count < Array.length(arr)) {
    match (isUpper) {
      true => {
        let char = arr[counter.count]
        accumulator.value = String.concat(accumulator.value, char)
        print(accumulator)
        addOne(counter)
      },
      false => addOne(counter),
    }
  }
}

// -------------------TEST SECTION ----------------------
let mut collectedArr = Array.init(1, n => "")
let testArr = String.split("", "this is a TEST OF words")
let stringRe = Result.unwrap(Regex.make("[a-z]+"))
let spaceRegex = Result.unwrap(Regex.make("\\s"))
let upperRe = Result.unwrap(Regex.make("[A-Z]+"))
let _ = Array.map(c => {

  let isSpace = Regex.isMatch(spaceRegex, c)
  let isString = Regex.isMatch(stringRe, c)
  let isUpper = Regex.isMatch(upperRe, c)

  match (c) {
    c when isString => {
      print("char: " ++ c)
      addOne(counter)
    },
    c when isSpace => {
      print("space: " ++ c)
      addOne(counter)
    },
    c when isUpper => {
      print("upper: " ++ c)
      addOne(counter)
    },
    _ => print("not sure: " ++ c),
  }
  addOne(counter)
}, testArr)
